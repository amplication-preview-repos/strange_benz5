/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Activity } from "./Activity";
import { ActivityCountArgs } from "./ActivityCountArgs";
import { ActivityFindManyArgs } from "./ActivityFindManyArgs";
import { ActivityFindUniqueArgs } from "./ActivityFindUniqueArgs";
import { CreateActivityArgs } from "./CreateActivityArgs";
import { UpdateActivityArgs } from "./UpdateActivityArgs";
import { DeleteActivityArgs } from "./DeleteActivityArgs";
import { AchievementFindManyArgs } from "../../achievement/base/AchievementFindManyArgs";
import { Achievement } from "../../achievement/base/Achievement";
import { Station } from "../../station/base/Station";
import { ActivityService } from "../activity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Activity)
export class ActivityResolverBase {
  constructor(
    protected readonly service: ActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async _activitiesMeta(
    @graphql.Args() args: ActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Activity])
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async activities(
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    return this.service.activities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Activity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "own",
  })
  async activity(
    @graphql.Args() args: ActivityFindUniqueArgs
  ): Promise<Activity | null> {
    const result = await this.service.activity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Activity)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "create",
    possession: "any",
  })
  async createActivity(
    @graphql.Args() args: CreateActivityArgs
  ): Promise<Activity> {
    return await this.service.createActivity({
      ...args,
      data: {
        ...args.data,

        station: args.data.station
          ? {
              connect: args.data.station,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Activity)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "update",
    possession: "any",
  })
  async updateActivity(
    @graphql.Args() args: UpdateActivityArgs
  ): Promise<Activity | null> {
    try {
      return await this.service.updateActivity({
        ...args,
        data: {
          ...args.data,

          station: args.data.station
            ? {
                connect: args.data.station,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Activity)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "delete",
    possession: "any",
  })
  async deleteActivity(
    @graphql.Args() args: DeleteActivityArgs
  ): Promise<Activity | null> {
    try {
      return await this.service.deleteActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Achievement], { name: "achievements" })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "any",
  })
  async findAchievements(
    @graphql.Parent() parent: Activity,
    @graphql.Args() args: AchievementFindManyArgs
  ): Promise<Achievement[]> {
    const results = await this.service.findAchievements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Station, {
    nullable: true,
    name: "station",
  })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "any",
  })
  async getStation(
    @graphql.Parent() parent: Activity
  ): Promise<Station | null> {
    const result = await this.service.getStation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetAllActivities(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetAllActivities(args);
  }
}
