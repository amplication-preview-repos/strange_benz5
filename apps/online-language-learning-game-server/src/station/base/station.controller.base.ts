/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StationService } from "../station.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StationCreateInput } from "./StationCreateInput";
import { Station } from "./Station";
import { StationFindManyArgs } from "./StationFindManyArgs";
import { StationWhereUniqueInput } from "./StationWhereUniqueInput";
import { StationUpdateInput } from "./StationUpdateInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StationControllerBase {
  constructor(
    protected readonly service: StationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Station })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStation(
    @common.Body() data: StationCreateInput
  ): Promise<Station> {
    return await this.service.createStation({
      data: {
        ...data,

        level: data.level
          ? {
              connect: data.level,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        level: {
          select: {
            id: true,
          },
        },

        name: true,
        order: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Station] })
  @ApiNestedQuery(StationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async stations(@common.Req() request: Request): Promise<Station[]> {
    const args = plainToClass(StationFindManyArgs, request.query);
    return this.service.stations({
      ...args,
      select: {
        createdAt: true,
        id: true,

        level: {
          select: {
            id: true,
          },
        },

        name: true,
        order: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async station(
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Station | null> {
    const result = await this.service.station({
      where: params,
      select: {
        createdAt: true,
        id: true,

        level: {
          select: {
            id: true,
          },
        },

        name: true,
        order: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStation(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() data: StationUpdateInput
  ): Promise<Station | null> {
    try {
      return await this.service.updateStation({
        where: params,
        data: {
          ...data,

          level: data.level
            ? {
                connect: data.level,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          level: {
            select: {
              id: true,
            },
          },

          name: true,
          order: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStation(
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Station | null> {
    try {
      return await this.service.deleteStation({
        where: params,
        select: {
          createdAt: true,
          id: true,

          level: {
            select: {
              id: true,
            },
          },

          name: true,
          order: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/activities")
  @ApiNestedQuery(ActivityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async findActivities(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivities(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        order: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "update",
    possession: "any",
  })
  async connectActivities(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "update",
    possession: "any",
  })
  async updateActivities(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "update",
    possession: "any",
  })
  async disconnectActivities(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/get-all-stations")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAllStations(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetAllStations(body);
  }
}
