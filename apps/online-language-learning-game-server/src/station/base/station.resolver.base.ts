/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Station } from "./Station";
import { StationCountArgs } from "./StationCountArgs";
import { StationFindManyArgs } from "./StationFindManyArgs";
import { StationFindUniqueArgs } from "./StationFindUniqueArgs";
import { CreateStationArgs } from "./CreateStationArgs";
import { UpdateStationArgs } from "./UpdateStationArgs";
import { DeleteStationArgs } from "./DeleteStationArgs";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { Level } from "../../level/base/Level";
import { StationService } from "../station.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Station)
export class StationResolverBase {
  constructor(
    protected readonly service: StationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "any",
  })
  async _stationsMeta(
    @graphql.Args() args: StationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Station])
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "any",
  })
  async stations(
    @graphql.Args() args: StationFindManyArgs
  ): Promise<Station[]> {
    return this.service.stations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Station, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "read",
    possession: "own",
  })
  async station(
    @graphql.Args() args: StationFindUniqueArgs
  ): Promise<Station | null> {
    const result = await this.service.station(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Station)
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "create",
    possession: "any",
  })
  async createStation(
    @graphql.Args() args: CreateStationArgs
  ): Promise<Station> {
    return await this.service.createStation({
      ...args,
      data: {
        ...args.data,

        level: args.data.level
          ? {
              connect: args.data.level,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Station)
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "update",
    possession: "any",
  })
  async updateStation(
    @graphql.Args() args: UpdateStationArgs
  ): Promise<Station | null> {
    try {
      return await this.service.updateStation({
        ...args,
        data: {
          ...args.data,

          level: args.data.level
            ? {
                connect: args.data.level,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Station)
  @nestAccessControl.UseRoles({
    resource: "Station",
    action: "delete",
    possession: "any",
  })
  async deleteStation(
    @graphql.Args() args: DeleteStationArgs
  ): Promise<Station | null> {
    try {
      return await this.service.deleteStation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Activity], { name: "activities" })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async findActivities(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Level, {
    nullable: true,
    name: "level",
  })
  @nestAccessControl.UseRoles({
    resource: "Level",
    action: "read",
    possession: "any",
  })
  async getLevel(@graphql.Parent() parent: Station): Promise<Level | null> {
    const result = await this.service.getLevel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetAllStations(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetAllStations(args);
  }
}
